# resolver (Making use of libraries like Yup and Zod for validation)
The 'useForm()' hook takes an object as an optional argument. One of the options is the 'resolver' function.
The resolver function option allows you to use any external validation library such as 'Yup', 'Zod', 'Joi', 'Vest' and many others. 
$ yarn add @hookform/resolvers

# Example
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { registerSchema } from '../schemas';
const {
  register,
  handleSubmit,
  reset,
  formState: { errors, isSubmitting }
} = useForm<FormFields>({
  resolver: zodResolver(registerSchema)
});

'src/schemas/index.ts'
import { z } from 'zod';
export const registerSchema = z
  .object({
    email: z
      .string({ required_error: 'Email is required' })
      .min(1, { message: 'Email is required' })
      .email({ message: 'Enter a valid email' }),
    password: z
      .string({ required_error: 'Password is required' })
      .min(1, { message: 'Password is required' })
      .min(8, 'Password must be at least 8 characters long')
      .regex(
        /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).+$/,
        'Password must contain a lower case letter, an upper case letter and a number'
      ),
    confirmPassword: z
      .string({ required_error: 'Confirm Password is required' })
      .min(1, { message: 'Confirm Password is required' })
  })
  .refine(({ password, confirmPassword }) => password === confirmPassword, {
    message: 'Password and Confirm password must match',
    path: ['confirmPassword']
  });

export type RegistrationFormFields = z.infer<typeof registerSchema>;

/* 
NOTE:
- z.string() accepts empty string, that is why I'm using the z.min(1) for checking that the field is not empty.
- The reason why I'm leaving the 'required_error' option in z.string() is so that this schema is usable in the server.
*/